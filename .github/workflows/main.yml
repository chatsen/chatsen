on: [push, pull_request]

jobs:
  android_build:
    name: Android Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: chatsen/signingkeys
          token: ${{secrets.GHKEY}}
          path: signingkeys
          ref: master

      - uses: actions/checkout@v2
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          path: chatsen

      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      - name: Changing version number and build number to the Github Tag
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: ./chatsen
        run: |
          sed -i "s/^version: .*$/version: ${GITHUB_REF/refs\/tags\//}/" ./pubspec.yaml
          cat ./pubspec.yaml

      - uses: subosito/flutter-action@v2.7.1
        with:
          flutter-version: "3.7.12"
          channel: "stable"

      # - name: Check for flutter updates
      #   run: flutter upgrade

      - name: Patch a fix for gifs inside the Flutter framework
        run: |
          sed -i '/_frameDuration = _nextFrame!.duration;/a \ \ \ \ \ \ if (_frameDuration!.inMilliseconds <= 10) _frameDuration = Duration(milliseconds: 100);' $(which flutter | head -n 1 | sed -e 's/\\/\//g' -e 's/\/bin\/flutter.*//')/packages/flutter/lib/src/painting/image_stream.dart

      - name: Generate project files and cleanup
        working-directory: ./chatsen
        run: |
          flutter create --org com.chatsen .
          rm -rf test
          sed -i '/<\/manifest>/i \ \ \ \ <uses-sdk tools:overrideLibrary="io.flutter.plugins.webviewflutter"/>' ./android/app/src/main/AndroidManifest.xml
          sed -i '/.*package=".*".*/i \ \ \ \ xmlns:tools="http://schemas.android.com/tools"' ./android/app/src/main/AndroidManifest.xml
          sed -i 's/android:label=".*"/android:label="Chatsen"/' ./android/app/src/main/AndroidManifest.xml
          sed -i '/.*package=".*".*/a \ \ \ <uses-permission android:name="android.permission.INTERNET"/>' ./android/app/src/main/AndroidManifest.xml
          sed -i '/.*release {.*/a \ \ \ \ \ \ \ \ \ \ \ \ shrinkResources false\n\ \ \ \ \ \ \ \ \ \ \ \ minifyEnabled false' ./android/app/build.gradle
          # sed -i 's/minSdkVersion 16/minSdkVersion 19/' ./android/app/build.gradle
          sed -i 's/minSdkVersion .*/minSdkVersion 21/' ./android/app/build.gradle
          sed -i 's/compileSdkVersion .*/compileSdkVersion 33/' ./android/app/build.gradle
          sed -i '/android {/i def keystoreProperties = new Properties()\ndef keystorePropertiesFile = rootProject.file('\''../../signingkeys/key.properties'\'')\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\n' ./android/app/build.gradle
          sed -i '/.*buildTypes {/i \ \ \ \ signingConfigs {\n\ \ \ \ \ \ \ \ release {\n\ \ \ \ \ \ \ \ \ \ \ \ keyAlias keystoreProperties['\''keyAlias'\'']\n\ \ \ \ \ \ \ \ \ \ \ \ keyPassword keystoreProperties['\''keyPassword'\'']\n\ \ \ \ \ \ \ \ \ \ \ \ storeFile keystoreProperties['\''storeFile'\''] ? file(keystoreProperties['\''storeFile'\'']) : null\n\ \ \ \ \ \ \ \ \ \ \ \ storePassword keystoreProperties['\''storePassword'\'']\n\ \ \ \ \ \ \ \ }\n\ \ \ \ }' ./android/app/build.gradle
          sed -i 's/signingConfig signingConfigs.debug/signingConfig signingConfigs.release/' ./android/app/build.gradle
          sed -i "/io.flutter.embedding.android.FlutterActivity/a import android.os.Bundle\nimport android.os.Build\nimport androidx.annotation.NonNull\nimport io.flutter.embedding.android.FlutterActivityLaunchConfigs.BackgroundMode.transparent\nimport io.flutter.embedding.engine.FlutterEngine\nimport io.flutter.plugins.GeneratedPluginRegistrant" android/app/src/main/kotlin/com/chatsen/chatsen/MainActivity.kt
          sed -i "/FlutterActivity()/a \ \ \ \ override fun onCreate(savedInstanceState: Bundle?) {\n\ \ \ \ \ \ \ \ super.onCreate(savedInstanceState)\n\ \ \ \ \ \ \ \ if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\n\ \ \ \ \ \ \ \ \ \ \ \ window.setDecorFitsSystemWindows(false)\n\ \ \ \ \ \ \ \ }\n\ \ \ \ }" android/app/src/main/kotlin/com/chatsen/chatsen/MainActivity.kt
          flutter pub run flutter_launcher_icons:main
          flutter build apk

      - name: Prepare release files
        run: |
          mkdir release
          cp ./chatsen/build/app/outputs/flutter-apk/app-release.apk ./release/Android.apk

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Android.apk
          path: ./release/Android.apk

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./release/Android.apk
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Remove updater dependency
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: ./chatsen
        run: |
          sed -i '/open_file/d' ./lib/Components/Modal/UpdateModal.dart
          sed -i '/OpenFile/d' ./lib/Components/Modal/UpdateModal.dart
          sed -i '/open_file/d' ./pubspec.yaml
          flutter pub get

      - name: Generate project files and cleanup
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: ./chatsen
        run: |
          sed -i 's/kPlayStoreRelease = false/kPlayStoreRelease = true/' ./lib/Consts.dart
          flutter build appbundle

      - name: Prepare release files
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cp ./chatsen/build/app/outputs/bundle/release/app-release.aab ./release/PlayStore.aab
          echo "Sync with Github repository." > whatsnew-en-US

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: PlayStore.aab
          path: ./release/PlayStore.aab

      - uses: r0adkll/upload-google-play@v1.0.15
        if: startsWith(github.ref, 'refs/tags/')
        with:
          packageName: com.chatsen.chatsen
          serviceAccountJson: ./signingkeys/pc-api-7512701657656671844-671-a7a04005a195.json
          track: production
          releaseFiles: ./release/PlayStore.aab
          whatsNewDirectory: .

  ios_build:
    name: iOS Build
    runs-on: macos-latest
    steps:
      - run: |
          brew install gnu-sed
          sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

      - uses: actions/checkout@v2
        with:
          repository: chatsen/signingkeys
          token: ${{secrets.GHKEY}}
          path: signingkeys
          ref: master

      - uses: actions/checkout@v2
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          path: chatsen

      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      - name: Changing version number and build number to the Github Tag
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: ./chatsen
        run: |
          sed -e "s/^version: .*$/version: ${GITHUB_REF/refs\/tags\//}/" ./pubspec.yaml > ./pubspec2.yaml
          mv -f ./pubspec2.yaml ./pubspec.yaml
          cat ./pubspec.yaml

      - uses: subosito/flutter-action@v2.7.1
        with:
          flutter-version: "3.7.12"
          channel: "stable"

      # - name: Check for flutter updates
      #   run: flutter upgrade

      - name: Patch a fix for gifs inside the Flutter framework
        run: |
          gsed -i '/_frameDuration = _nextFrame!.duration;/a \ \ \ \ \ \ if (_frameDuration!.inMilliseconds <= 10) _frameDuration = Duration(milliseconds: 100);' $(which flutter | head -n 1 | sed -e 's/\\/\//g' -e 's/\/bin\/flutter.*//')/packages/flutter/lib/src/painting/image_stream.dart

      - name: Generate project files and cleanup
        working-directory: ./chatsen
        run: |
          flutter create --org com.chatsen .
          rm -rf test
          gsed -i '/-> Bool {/a \ \ \ \ if #available(iOS 10.0, *) {\ \ \ \ \ \ UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate\ \ \ \ }' ./ios/Runner/AppDelegate.swift
          gsed -i 's/<string>chatsen<\/string>/<string>Chatsen<\/string>/' ./ios/Runner/Info.plist
          # gsed -i '/<dict>/a \ \ <key>UIBackgroundModes</key>\n\ \ <array>\n\ \ \ \ <string>audio</string>\n\ \ </array>' ios/Runner/Info.plist
          gsed -i '/<dict>/a \ \ <key>NSPhotoLibraryUsageDescription</key>\n\ \ <string>Chatsen requests to access your files to allow file selection.</string>' ios/Runner/Info.plist
          gsed -i '/<dict>/a \ \ <key>CADisableMinimumFrameDurationOnPhone</key><true/>' ios/Runner/Info.plist
          gsed -i '/<dict>/a \ \ <key>ITSAppUsesNonExemptEncryption</key><false/>' ios/Runner/Info.plist
          gsed -i 's/minSdkVersion .*/minSdkVersion 21/' ./android/app/build.gradle
          flutter pub run flutter_launcher_icons:main
          flutter build ios --no-codesign
          # '<key>UIBackgroundModes</key>\	\<array>\	\	<string>audio</string>\	\	<string>bluetooth-central</string>\	\	<string>bluetooth-peripheral</string>\	\	<string>external-accessory</string>\	\	<string>fetch</string>\	\	<string>location</string>\	\	<string>processing</string>\	\	<string>remote-notification</string>\	\	<string>voip</string>\	\</array>'

      - name: Prepare release files and converting .app to .ipa
        run: |
          mkdir -p release/Payload
          cp -rf ./chatsen/build/ios/iphoneos/Runner.app ./release/Payload/Runner.app
          ditto -c -k --sequesterRsrc --keepParent ./release/Payload ./release/iOS.ipa

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS.ipa
          path: ./release/iOS.ipa

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./release/iOS.ipa
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}














      # - run: |
      #     sudo gem install nomad-cli
      #     brew install gnu-sed
      #     sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"



      # - name: Import certificate to the keychain and provisioning profile
      #   run: |
      #     # # create variables
      #     # KEYCHAIN_PASSWORD=$(cat signingkeys/apple/keychainpassword)
      #     # P12_PASSWORD=$(cat signingkeys/apple/keychainpassword)
      #     # CERTIFICATE_PATH=signingkeys/apple/ios_distribution.p12
      #     # PP_PATH=signingkeys/apple/Chatsen.mobileprovision
      #     # KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # # create temporary keychain
      #     # security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     # security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     # security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # # import certificate to keychain
      #     # security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     # security list-keychain -d user -s $KEYCHAIN_PATH

      #     # # apply provisioning profile
      #     # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      #     # # list identities
      #     # security find-identity


          ######################################
          ######################################
          ######################################
          ######################################
          ######################################
          ######################################
          ######################################
          ######################################
          ######################################
          #           # create variables
          # KEYCHAIN_PASSWORD=$(cat ../signingkeys/apple/keychainpassword)
          # P12_PASSWORD=$(cat ../signingkeys/apple/keychainpassword)
          # CERTIFICATE_PATH=../signingkeys/apple/ios_distribution.p12
          # PP_PATH=../signingkeys/apple/Chatsen.mobileprovision
          # KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # # create temporary keychain
          # security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          # security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # # import certificate to keychain
          # security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          # security list-keychain -d user -s $KEYCHAIN_PATH

          # # apply provisioning profile
          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # # list identities
          # security find-identity
          ######################################
          ######################################
          ######################################
          ######################################
          ######################################


      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1

      # - name: Sign the iOS application
      #   run: |

      #     # Create a new keychain
      #     security create-keychain -p $(cat signingkeys/apple/keychainpassword) signingkeys/apple/build.keychain
      #     security default-keychain -s signingkeys/apple/build.keychain
      #     security unlock-keychain -p $(cat signingkeys/apple/keychainpassword) signingkeys/apple/build.keychain

      #     # Load distribution certificate
      #     security import signingkeys/apple/ios_distribution.p12 -P "$(cat signingkeys/apple/keychainpassword)" -k signingkeys/apple/build.keychain -T /usr/bin/codesign
      #     # security import signingkeys/apple/ios_distribution.p12 -P "$(cat signingkeys/apple/keychainpassword)" -A -t cert -f pkcs12 -k signingkeys/apple/build.keychain -T /usr/bin/codesign

      #     # List identities
      #     security find-identity


      #     # Fix partitions
      #     security set-key-partition-list -S "apple-tool:,apple:,codesign: -s -k $(cat signingkeys/apple/keychainpassword) signingkeys/apple/build.keychain"

      #     #
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp signingkeys/apple/Chatsen.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles

      #     # Get entitlements
      #     security cms -D -i signingkeys/apple/Chatsen.mobileprovision > signingkeys/apple/Chatsen.mobileprovision.plist && /usr/libexec/PlistBuddy -x -c 'Print:Entitlements' signingkeys/apple/Chatsen.mobileprovision.plist > signingkeys/apple/entitlements.plist

      #     # AAAAAAAAAAAAAAAAa

      #     rm -rf release
      #     mkdir -p release/Payload
      #     cp -rf ./chatsen/build/ios/iphoneos/Runner.app ./release/Payload/Runner.app

      #     # Copy provisioning profile
      #     cp -f signingkeys/apple/Chatsen.mobileprovision release/Payload/Runner.app/embedded.mobileprovision

      #     # Sign the application
      #     # codesign --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/* -v
      #     codesign --deep -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app
      #     codesign --deep -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Runner

      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/App.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/disk_space.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/DKImagePickerController.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/DKPhotoGallery.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/file_picker.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/Flutter.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/flutter_local_notifications.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/FMDB.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/open_file.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/package_info.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/package_info_plus.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/path_provider_ios.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/SDWebImage.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/Sentry.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/sentry_flutter.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/share.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/sqflite.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/SwiftyGif.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/url_launcher_ios.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/wakelock.framework
      #     codesign -v --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/webview_flutter_wkwebview.framework


      #   # /usr/bin/codesign --force --sign - --entitlements /Users/user2020/Library/Developer/Xcode/DerivedData/Runner-epqpftwmoicslfeecsrrgqoweeja/Build/Intermediates.noindex/Runner.build/Debug-iphonesimulator/Runner.build/ExitNews.app.xcent --timestamp=none ExitNews.app

      #     ditto -c -k --sequesterRsrc --keepParent ./release/Payload ./release/iOS-signed.ipa
      #     xcrun altool --upload-app --type ios --file release/iOS-signed.ipa --username "$(cat signingkeys/apple/account/email)" --password "$(cat signingkeys/apple/account/password)"

      #     # Optional: remove keychain
      #     # security delete-keychain signingkeys/apple/build.keychain

      # - name: Prepare signed release files and converting .app to .ipa
      #   run: |
      #     rm -rf release
      #     mkdir -p release/Payload
      #     cp -rf ./chatsen/build/ios/iphoneos/Runner.app ./release/Payload/Runner.app

      #     codesign --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app/Frameworks/* -v
      #     codesign --entitlements signingkeys/apple/entitlements.plist -f -s "$(cat signingkeys/apple/signingcertname)" release/Payload/Runner.app -v

      #     ditto -c -k --sequesterRsrc --keepParent ./release/Payload ./release/iOS-signed.ipa

      # - name: Upload .ipa to App Store Connect
      #   run: |
      #     xcrun altool --upload-app --type ios --file release/iOS-signed.ipa --username "$(cat signingkeys/apple/account/email)" --password "$(cat signingkeys/apple/account/password)"
