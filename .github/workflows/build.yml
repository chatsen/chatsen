name: Build

on:
  push:
    branches:
      - '*'
      - '!l10n_dev'

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target: ["Android", "iOS"] # ["Android", "Windows", "Linux", "macOS", "iOS"]
        include:
          - target: Android
            os: ubuntu-latest
          # - target: Windows
          #   os: windows-latest
          # - target: Linux
          #   os: ubuntu-latest
          # - target: macOS
          #   os: macos-latest
          - target: iOS
            os: macos-latest

    name: ${{matrix.target}}
    runs-on: ${{matrix.os}}
    env:
      APP_TITLE: Chatsen
      APP_NAME: chatsen
      APP_PATH: chatsen
      APP_ORG: com.chatsen

    steps:
      - name: Set up sed
        if: matrix.os != 'macos-latest'
        run: echo "sed=sed" >> $GITHUB_ENV

      - name: Set up sed for macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-sed
          echo "sed=gsed" >> $GITHUB_ENV

      # - name: Setup upterm session
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: lhotari/action-upterm@v1

      # - name: Set up Adoptium JDK for Ubuntu
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     sudo apt install -y wget apt-transport-https gpg
      #     sudo wget -qO - https://packages.adoptium.net/artifactory/api/gpg/key/public | sudo gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/adoptium.gpg > /dev/null
      #     echo "deb https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | sudo tee /etc/apt/sources.list.d/adoptium.list
      #     sudo apt update
      #     sudo apt install temurin-17-jdk

      - name: Checking out the ${{env.APP_TITLE}} source code
        uses: actions/checkout@v3
        with:
          path: ${{env.APP_PATH}}

      - name: Checking out flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      - name: Check for flutter updates
        run: flutter upgrade

      - name: Setting up the project
        working-directory: ${{env.APP_PATH}}
        run: flutter create --org ${{env.APP_ORG}} .

      - name: Cleaning up the test directory
        working-directory: ${{env.APP_PATH}}
        run: rm -rf test

      - name: Building required generated source files
        working-directory: ${{env.APP_PATH}}
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Applying Android project patches
        if: matrix.target == 'Android'
        working-directory: ${{env.APP_PATH}}
        run: |
          $sed -i 's/android:label=".*"/android:label="${{env.APP_TITLE}}"/' ./android/app/src/main/AndroidManifest.xml
          # $sed -i '/defaultConfig {/a \ \ \ \ \ \ \ \ multiDexEnabled = true' ./android/app/build.gradle.kts
          $sed -i '/compileOptions {/a \ \ \ \ \ \ \ \ isCoreLibraryDesugaringEnabled = true' ./android/app/build.gradle.kts
          echo -e '\ndependencies {\n    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.3")\n}' >> ./android/app/build.gradle.kts
          $sed -i '/.*\/manifest.*/i \ \ \ \ <uses-permission android:name="android.permission.INTERNET"/>' ./android/app/src/main/AndroidManifest.xml
          # $sed -i "/io.flutter.embedding.android.FlutterActivity/a import android.os.Bundle\nimport android.os.Build\nimport androidx.annotation.NonNull\nimport io.flutter.embedding.android.FlutterActivityLaunchConfigs.BackgroundMode.transparent\nimport io.flutter.embedding.engine.FlutterEngine\nimport io.flutter.plugins.GeneratedPluginRegistrant" android/app/src/main/kotlin/com/chatsen/chatsen/MainActivity.kt
          # $sed -i "/FlutterActivity()/a \ \ \ \ override fun onCreate(savedInstanceState: Bundle?) {\n\ \ \ \ \ \ \ \ super.onCreate(savedInstanceState)\n\ \ \ \ \ \ \ \ if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\n\ \ \ \ \ \ \ \ \ \ \ \ window.setDecorFitsSystemWindows(false)\n\ \ \ \ \ \ \ \ }\n\ \ \ \ }" android/app/src/main/kotlin/com/chatsen/chatsen/MainActivity.kt

      - name: Applying iOS project patches
        if: matrix.target == 'iOS'
        working-directory: ${{env.APP_PATH}}
        run: |
          $sed -i 's/<string>${{env.APP_NAME}}<\/string>/<string>${{env.APP_TITLE}}<\/string>/' ./ios/Runner/Info.plist
          $sed -i '/<dict>/a \ \ <key>NSPhotoLibraryUsageDescription</key>\n\ \ <string>${{env.APP_TITLE}} requests to access your files to allow file selection.</string>' ios/Runner/Info.plist
          $sed -i '/<dict>/a \ \ <key>CADisableMinimumFrameDurationOnPhone</key><true/>' ios/Runner/Info.plist
          $sed -i '/<dict>/a \ \ <key>ITSAppUsesNonExemptEncryption</key><false/>' ios/Runner/Info.plist

      - name: Building ${{env.APP_TITLE}} for Android
        if: matrix.target == 'Android'
        working-directory: ${{env.APP_PATH}}
        env:
          JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
        run: flutter build apk

      - name: Building ${{env.APP_TITLE}} for iOS
        if: matrix.target == 'iOS'
        working-directory: ${{env.APP_PATH}}
        run: flutter build ios --no-codesign

      - name: Building ${{env.APP_TITLE}} for Windows
        if: matrix.target == 'Windows'
        working-directory: ${{env.APP_PATH}}
        run: flutter build windows -v

      - name: Uploading Android artifact
        uses: actions/upload-artifact@v4
        if: matrix.target == 'Android'
        with:
          name: ${{env.APP_NAME}}-android.apk
          path: ${{env.APP_PATH}}/build/app/outputs/flutter-apk/app-release.apk

      - name: Packing iOS ipa
        if: matrix.target == 'iOS'
        working-directory: ${{env.APP_PATH}}
        run: |
          mkdir -p build/ios/iphoneos/Payload
          cp -rf build/ios/iphoneos/Runner.app build/ios/iphoneos/Payload/Runner.app
          ditto -c -k --sequesterRsrc --keepParent build/ios/iphoneos/Payload build/ios/iphoneos/iOS.ipa

      - name: Uploading iOS artifact
        uses: actions/upload-artifact@v4
        if: matrix.target == 'iOS'
        with:
          name: ${{env.APP_NAME}}-ios.ipa
          path: ${{env.APP_PATH}}/build/ios/iphoneos/iOS.ipa
